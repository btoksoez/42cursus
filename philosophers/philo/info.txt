Your program(s) should take the following arguments:
- number_of_philosophers: The number of philosophers and also the number of forks.
- time_to_die (in milliseconds): If a philosopher doesn't start eating time_to_die milliseconds since the beginning of their last meal or the beginning of the simulation, they die.
- time_to_eat (in milliseconds): The time it takes for a philosopher to eat. During that time, they will need to hold two forks.
- time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.
- number_of_times_each_philosopher_must_eat (optional argument): If all philosophers have eaten at least number_of_times_each_philosopher_must_eat times, the simulation stops. If not specified, the simulation stops when a philosopher dies.

Each philosopher has a number ranging from 1 to number_of_philosophers.
Philosopher number 1 sits next to philosopher number number_of_philosophers. Any other philosopher number N sits between philosopher number N - 1 and philosopher number N + 1.
• One or more philosophers sit at a round table.
There is a large bowl of spaghetti in the middle of the table.
• The philosophers alternatively eat, think, or sleep.
While they are eating, they are not thinking nor sleeping; while thinking, they are not eating nor sleeping;
and, of course, while sleeping, they are not eating nor thinking.
• There are also forks on the table. There are as many forks as philosophers.
• Because serving and eating spaghetti with only one fork is very inconvenient, a
philosopher takes their right and their left forks to eat, one in each hand.
• When a philosopher has finished eating, they put their forks back on the table and start sleeping. Once awake, they start thinking again. The simulation stops when a philosopher dies of starvation.
• Every philosopher needs to eat and should never starve.
• Philosophers don’t speak with each other.
• Philosophers don’t know if another philosopher is about to die.
• No need to say that philosophers should avoid dying!

- what are data races
- what are threads
- functions:
pthread_create: This function creates a new thread within the current process. It takes several arguments, including a pointer to a pthread_t object to store the ID of the new thread, thread attributes (often set to NULL for default attributes), a function pointer to the function that will be executed by the new thread, and an optional argument to pass to the function.

pthread_detach: This function marks a thread as detached. A detached thread's resources are automatically released when it exits, without the need for another thread to join it.

pthread_join: This function waits for a thread to terminate. It takes the thread ID of the thread to join as an argument. The calling thread will be blocked until the specified thread terminates.

pthread_mutex_init: This function initializes a mutex. A mutex is used to protect shared resources in a multi-threaded program from being accessed simultaneously by multiple threads.

pthread_mutex_destroy: This function destroys a mutex, releasing any resources associated with it.

pthread_mutex_lock: This function locks a mutex, preventing other threads from accessing the protected resource until the mutex is unlocked.

pthread_mutex_unlock: This function unlocks a mutex, allowing other threads to access the protected resource.

- can not know which thread executes when, just can protect variables
